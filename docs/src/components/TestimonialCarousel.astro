---
import { Icon } from "@astrojs/starlight/components";
import testimonialsData from "../data/testimonials.json";
import { processAvatars } from "../utils/imageImporter";

export interface Testimonial {
    name: string;
    text: string;
    avatar: string | { src: string; alt?: string };
    company?: string | null;
    role?: string | null;
    link?: string | null;
}

export type Testimonials = Testimonial[];

const testimonials: Testimonials = processAvatars(
    testimonialsData as Testimonials,
);

const initialIndex = 0;
const prevIndex =
    (initialIndex - 1 + testimonials.length) % testimonials.length;
const nextIndex = (initialIndex + 1) % testimonials.length;
---

<div
    class="testimonial-carousel"
    data-current-index={initialIndex}
    data-testimonials={JSON.stringify(testimonials)}
>
    <div class="carousel-container">
        {
            testimonials.map((testimonial, index) => (
                <div
                    class={`carousel-item ${
                        index === initialIndex
                            ? "current"
                            : index === prevIndex
                              ? "prev"
                              : index === nextIndex
                                ? "next"
                                : "hidden"
                    }`}
                    data-index={index}
                >
                    <div class="card" data-card-index={index}>
                        <img
                            class="avatar"
                            src={
                                typeof testimonial.avatar === "object"
                                    ? testimonial.avatar.src
                                    : testimonial.avatar
                            }
                            alt={testimonial.name}
                            loading="lazy"
                            title={`${testimonial.name}${testimonial.company ? `, ${testimonial.company}` : ""}${testimonial.role ? `, ${testimonial.role}` : ""}`}
                            onerror="this.src='https://ui-avatars.com/api/?name=' + encodeURIComponent(this.alt) + '&background=random'; this.onerror=null;"
                        />
                        <div class="text">{testimonial.text}</div>
                        <div class="name">
                            {testimonial.link ? (
                                <a
                                    href={testimonial.link}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                >
                                    {testimonial.name}
                                </a>
                            ) : (
                                testimonial.name
                            )}
                        </div>
                    </div>
                </div>
            ))
        }
    </div>

    <div class="controls">
        <button
            type="button"
            class="control-btn prev-btn"
            aria-label="Previous testimonial"
        >
            <Icon name="left-arrow" />
        </button>
        <div class="indicators">
            {
                testimonials.map((_, index) => (
                    <button
                        type="button"
                        class={`indicator ${index === initialIndex ? "active" : ""}`}
                        data-index={index}
                        aria-label={`Go to testimonial ${index + 1}`}
                        aria-pressed={index === initialIndex ? "true" : "false"}
                    />
                ))
            }
        </div>
        <button
            type="button"
            class="control-btn next-btn"
            aria-label="Next testimonial"
        >
            <Icon name="right-arrow" size="1.2rem" />
        </button>
    </div>
</div>

<script>
    interface Testimonial {
        name: string;
        text: string;
        avatar: string;
    }

    interface CarouselState {
        currentIndex: number;
        testimonials: Testimonial[];
        autoRotateInterval: number | null;
    }

    // Extended HTMLElement with our state
    interface CarouselElement extends HTMLElement {
        _state?: CarouselState;
    }

    // Function to initialize a carousel immediately without waiting for custom elements
    function initCarousel(carousel: CarouselElement): void {
        if (!carousel) return;

        try {
            const currentIndex: number = parseInt(
                carousel.getAttribute("data-current-index") || "0",
                10,
            );
            const testimonialsAttr: string | null =
                carousel.getAttribute("data-testimonials");

            if (!testimonialsAttr) {
                console.error("No testimonials data found");
                return;
            }

            const testimonialsData: Testimonial[] =
                JSON.parse(testimonialsAttr);
            const items: HTMLElement[] = Array.from(
                carousel.querySelectorAll(".carousel-item"),
            );
            const indicators: HTMLElement[] = Array.from(
                carousel.querySelectorAll(".indicator"),
            );
            const prevButton: HTMLButtonElement | null =
                carousel.querySelector(".prev-btn");
            const nextButton: HTMLButtonElement | null =
                carousel.querySelector(".next-btn");

            // Store state in the element for later use
            carousel._state = {
                currentIndex,
                testimonials: testimonialsData,
                autoRotateInterval: null,
            };

            // Set up navigation
            function navigate(direction: number): void {
                const state = carousel._state as CarouselState;
                const newIndex =
                    (state.currentIndex +
                        direction +
                        state.testimonials.length) %
                    state.testimonials.length;
                goToSlide(newIndex);
            }

            function goToSlide(index: number): void {
                const state = carousel._state as CarouselState;
                carousel.classList.add("is-transitioning");
                state.currentIndex = index;
                updateDisplay();

                setTimeout(() => {
                    carousel.classList.remove("is-transitioning");
                }, 500);
            }

            function updateDisplay(): void {
                const state = carousel._state as CarouselState;
                const prevIndex =
                    (state.currentIndex - 1 + state.testimonials.length) %
                    state.testimonials.length;
                const nextIndex =
                    (state.currentIndex + 1) % state.testimonials.length;

                items.forEach((item, i) => {
                    item.classList.remove("prev", "current", "next", "hidden");
                    if (i === state.currentIndex) {
                        item.classList.add("current");
                    } else if (i === prevIndex) {
                        item.classList.add("prev");
                    } else if (i === nextIndex) {
                        item.classList.add("next");
                    } else {
                        item.classList.add("hidden");
                    }
                });

                indicators.forEach((indicator, i) => {
                    indicator.setAttribute(
                        "aria-pressed",
                        i === state.currentIndex ? "true" : "false",
                    );
                    indicator.classList.toggle(
                        "active",
                        i === state.currentIndex,
                    );
                });
            }

            function startAutoRotate(interval: number = 5000): void {
                const state = carousel._state as CarouselState;
                stopAutoRotate();
                state.autoRotateInterval = window.setInterval(
                    () => navigate(1),
                    interval,
                );
            }

            function stopAutoRotate(): void {
                const state = carousel._state as CarouselState;
                if (state.autoRotateInterval) {
                    window.clearInterval(state.autoRotateInterval);
                    state.autoRotateInterval = null;
                }
            }

            // Add event listeners
            if (prevButton)
                prevButton.addEventListener("click", () => {
                    stopAutoRotate();
                    navigate(-1);
                });

            if (nextButton)
                nextButton.addEventListener("click", () => {
                    stopAutoRotate();
                    navigate(1);
                });

            indicators.forEach((indicator, index) => {
                indicator.addEventListener("click", () => {
                    stopAutoRotate();
                    goToSlide(index);
                });
            });

            // Initial update just to be safe
            updateDisplay();

            // Start auto-rotation
            startAutoRotate();

            console.log(
                "Carousel initialized successfully with direct approach",
            );
        } catch (err) {
            console.error(
                "Error initializing carousel with direct approach:",
                err,
            );
        }
    }

    // Initialize immediately on script load
    document
        .querySelectorAll<CarouselElement>(".testimonial-carousel")
        .forEach((carousel) => {
            initCarousel(carousel);
        });

    // Also initialize on DOMContentLoaded to be safe
    document.addEventListener("DOMContentLoaded", () => {
        document
            .querySelectorAll<CarouselElement>(".testimonial-carousel")
            .forEach((carousel) => {
                if (!carousel._state) {
                    initCarousel(carousel);
                }
            });
    });
</script>

<style>
    .testimonial-carousel {
        --carousel-primary: var(--sl-color-accent, #8d46e7);
        --carousel-text: var(--sl-color-text, #333);
        --carousel-background: var(--sl-color-bg, #fff);
        --carousel-card-bg: var(--sl-color-bg-sidebar, #f5f5f5);
        --carousel-shadow: var(--sl-shadow-sm, rgba(0, 0, 0, 0.1));
        --carousel-indicator: rgba(0, 0, 0, 0.25);
        --carousel-indicator-active: var(--carousel-primary);

        width: 100%;
        max-width: 1200px;
        margin: 2rem auto;
        position: relative;
        padding: 2rem 0;
        overflow: hidden;
    }

    .carousel-container {
        display: flex;
        position: relative;
        min-height: 380px;
        margin: 0 auto;
        overflow: visible;
        width: 100%;
    }

    .carousel-item {
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%) scale(0.8);
        width: 100%;
        max-width: 500px;
        opacity: 0;
        filter: blur(3px);
        pointer-events: none;
        margin-top: initial;
    }

    .carousel-item.prev {
        opacity: 0.7;
        transform: translateX(calc(-50% - 250px)) scale(0.85);
        z-index: 1;
        pointer-events: auto;
    }

    .carousel-item.current {
        opacity: 1;
        transform: translateX(-50%) scale(1);
        z-index: 2;
        filter: blur(0);
        pointer-events: auto;
    }

    .carousel-item.next {
        opacity: 0.7;
        transform: translateX(calc(-50% + 250px)) scale(0.85);
        z-index: 1;
        pointer-events: auto;
    }

    .carousel-item.hidden {
        opacity: 0;
        z-index: 0;
        transform: translateX(-50%) scale(0.5);
        pointer-events: none;
        display: block;
    }

    .is-transitioning .carousel-item {
        transition: all 0.5s cubic-bezier(0.25, 1, 0.5, 1);
    }

    .card {
        padding: 2.5rem;
        border-radius: 0.8rem;
        box-shadow:
            0 10px 20px rgba(0, 0, 0, 0.08),
            0 6px 6px rgba(0, 0, 0, 0.12),
            0 0 0 1px rgba(0, 0, 0, 0.05);
        text-align: center;
        color: var(--carousel-text);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 280px;
        width: 100%;
        max-width: 500px;
        margin: 0 auto;
        background-color: var(--carousel-card-bg);
        backdrop-filter: blur(5px);
    }

    .card[data-card-index="0"] {
        background: 
            radial-gradient(
                circle at 20% 35%,
                color-mix(in srgb, var(--carousel-card-bg) 85%, var(--carousel-primary)) 0%,
                transparent 35%
            ),
            radial-gradient(
                circle at 80% 85%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #ffb347) 0%,
                transparent 40%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="1"] {
        background: 
            radial-gradient(
                circle at 65% 15%,
                color-mix(in srgb, var(--carousel-card-bg) 88%, #46e7b6) 0%,
                transparent 38%
            ),
            radial-gradient(
                circle at 25% 90%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #e746a1) 0%,
                transparent 42%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="2"] {
        background: 
            radial-gradient(
                circle at 55% 8%,
                color-mix(in srgb, var(--carousel-card-bg) 85%, #e7e746) 0%,
                transparent 35%
            ),
            radial-gradient(
                circle at 95% 95%,
                color-mix(in srgb, var(--carousel-card-bg) 88%, #46a1e7) 0%,
                transparent 45%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="3"] {
        background: 
            radial-gradient(
                circle at 12% 65%,
                color-mix(in srgb, var(--carousel-card-bg) 92%, #e74646) 0%,
                transparent 40%
            ),
            radial-gradient(
                ellipse at 85% 25%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #46e77a) 0%,
                transparent 38%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="4"] {
        background: 
            radial-gradient(
                circle at 65% 65%,
                color-mix(in srgb, var(--carousel-card-bg) 88%, #b346e7) 0%,
                transparent 45%
            ),
            radial-gradient(
                circle at 35% 15%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #e7c846) 0%,
                transparent 35%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="5"] {
        background: 
            radial-gradient(
                circle at 45% 85%,
                color-mix(in srgb, var(--carousel-card-bg) 85%, #46e7e7) 0%,
                transparent 40%
            ),
            radial-gradient(
                circle at 90% 10%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #e746b3) 0%,
                transparent 38%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="6"] {
        background: 
            radial-gradient(
                circle at 10% 10%,
                color-mix(in srgb, var(--carousel-card-bg) 92%, #e7b346) 0%,
                transparent 38%
            ),
            radial-gradient(
                circle at 90% 90%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #46e7d1) 0%,
                transparent 42%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="7"] {
        background: 
            radial-gradient(
                circle at 65% 12%,
                color-mix(in srgb, var(--carousel-card-bg) 88%, #e746e7) 0%,
                transparent 35%
            ),
            radial-gradient(
                circle at 15% 95%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #46e7a1) 0%,
                transparent 40%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="8"] {
        background: 
            radial-gradient(
                circle at 85% 55%,
                color-mix(in srgb, var(--carousel-card-bg) 92%, #46b3e7) 0%,
                transparent 45%
            ),
            radial-gradient(
                circle at 25% 35%,
                color-mix(in srgb, var(--carousel-card-bg) 88%, #e7e746) 0%,
                transparent 38%
            ),
            var(--carousel-card-bg);
    }
    .card[data-card-index="9"] {
        background: 
            radial-gradient(
                circle at 55% 55%,
                color-mix(in srgb, var(--carousel-card-bg) 90%, #e7467a) 0%,
                transparent 42%
            ),
            radial-gradient(
                circle at 85% 25%,
                color-mix(in srgb, var(--carousel-card-bg) 92%, #46e7e7) 0%,
                transparent 35%
            ),
            var(--carousel-card-bg);
    }
    
    @supports not (background: color-mix(in srgb, red, blue)) {
        .card {
            background-color: var(--carousel-card-bg);
        }
        
        .card[data-card-index="0"] {
            background: linear-gradient(135deg, rgba(141, 70, 231, 0.1), var(--carousel-card-bg), rgba(255, 179, 71, 0.1));
        }
        .card[data-card-index="1"] {
            background: linear-gradient(135deg, rgba(70, 231, 182, 0.1), var(--carousel-card-bg), rgba(231, 70, 161, 0.1));
        }
    }

    .avatar {
        width: 6rem;
        height: 6rem;
        border-radius: 50%;
        margin-bottom: 2rem;
        border: 3px solid var(--carousel-primary);
        object-fit: cover;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .text {
        font-size: 1.4rem;
        line-height: 1.6;
        margin-bottom: 1.5rem;
        position: relative;
        font-style: italic;
        max-width: 90%;
    }

    .text::before {
        content: '"';
        font-size: 3.5rem;
        color: var(--carousel-primary);
        position: absolute;
        top: -0.6em;
        left: -0.3em;
        font-family: serif;
        line-height: 1;
        pointer-events: none;
        z-index: 1;
    }
    
    .text {
        position: relative;
        z-index: 2;
        padding-left: 0.5em;
    }

    .name {
        font-weight: bold;
        font-size: 1.3rem;
        margin-top: 1.5rem;
        color: var(--carousel-primary);
        position: relative;
        padding-top: 0.75rem;
    }

    .name a {
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .name::before {
        content: "";
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 30px;
        height: 2px;
        background-color: var(--carousel-primary);
        opacity: 0.6;
    }

    .controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-top: 2.5rem;
        padding-top: 1.5rem;
        position: relative;
        z-index: 10;
    }

    .control-btn {
        background-color: var(--carousel-primary);
        color: white;
        border: none;
        border-radius: .8rem;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px var(--carousel-shadow);
        padding: 0;
        margin: 0;
    }

    .control-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 8px var(--carousel-shadow);
    }

    .indicators {
        display: flex;
        gap: 0.75rem;
        align-items: center;
        padding: 0 1rem;
    }

    .indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: var(--carousel-indicator);
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 0;
        margin: 0;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .indicator.active {
        background-color: var(--carousel-indicator-active);
        transform: scale(1.3);
        border-color: transparent;
    }

    @media (max-width: 1024px) {
        .carousel-item.prev {
            transform: translateX(calc(-50% - 250px)) scale(0.85);
        }

        .carousel-item.next {
            transform: translateX(calc(-50% + 250px)) scale(0.85);
        }

        .card {
            padding: 2rem;
            min-height: 260px;
        }
        
        .controls {
            margin-top: 2rem;
        }
    }

    @media (max-width: 768px) {
        .carousel-container {
            min-height: 360px;
        }

        .controls {
            margin-top: 1rem;
        }

        .carousel-item.prev,
        .carousel-item.next {
            display: none;
        }

        .carousel-item.current {
            position: relative;
            transform: translateX(-50%) scale(1);
            width: 80%;
        }

        .card {
            padding: 1.75rem;
            min-height: 220px;
        }

        .avatar {
            width: 70px;
            height: 70px;
            margin-bottom: 1.25rem;
        }

        .text {
            font-size: 1.2rem;
        }
    }

    :global(.dark) .testimonial-carousel {
        --carousel-indicator: rgba(255, 255, 255, 0.4);
        --carousel-card-bg: var(--sl-color-black, #1a1a1a);
    }
</style>
