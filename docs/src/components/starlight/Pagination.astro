---
import Comments from "starlight-giscus/components/Comments.astro";
import Default from "@astrojs/starlight/components/Pagination.astro";
---

<Default />
<Comments />

<script>
  const DEBUG = false; // Set to true for detailed logging

  function debugLog(...args: any[]) {
    if (DEBUG) console.log(...args);
  }

  let pendingMessageTimeouts: ReturnType<typeof setTimeout>[] = [];

  function clearPendingMessages() {
    pendingMessageTimeouts.forEach((timeout) => clearTimeout(timeout));
    pendingMessageTimeouts = [];
    debugLog("Cleared pending message timeouts");
  }

  function syncCommentsTheme() {
    const dataTheme = document.documentElement.getAttribute("data-theme");
    if (!dataTheme) {
      debugLog("Skipping theme sync - no data-theme");
      return;
    }

    const starlightTheme = localStorage.getItem("starlight-theme");
    debugLog(
      `Theme sync: data-theme="${dataTheme}", starlight-theme="${starlightTheme}"`,
    );

    // Only intervene if user has "auto" or no theme preference
    if (
      starlightTheme !== "auto" &&
      starlightTheme !== null &&
      starlightTheme !== ""
    ) {
      debugLog(
        `User has explicit theme "${starlightTheme}" - no intervention needed`,
      );
      return;
    }

    // Get theme config from giscus element
    const giscusElement = document.querySelector("giscus-comments");
    const themeAttr = giscusElement?.getAttribute("data-theme");

    if (!themeAttr) {
      debugLog("No theme configuration found on giscus element");
      return;
    }

    try {
      const themeConfig = JSON.parse(themeAttr.replace(/&quot;/g, '"'));
      const resolvedTheme = themeConfig[dataTheme];

      if (!resolvedTheme) {
        debugLog(`No theme mapping found for "${dataTheme}"`);
        return;
      }

      debugLog(
        `User is in auto mode, updating giscus theme to: ${resolvedTheme}`,
      );

      // Clear any pending message attempts
      clearPendingMessages();

      // Try to update the script's data-theme attribute before iframe loads
      const giscusScript = giscusElement?.querySelector(
        'script[src*="giscus.app"]',
      );
      if (giscusScript) {
        const currentTheme = giscusScript.getAttribute("data-theme");
        if (currentTheme !== resolvedTheme) {
          debugLog(
            `Updating script data-theme from "${currentTheme}" to "${resolvedTheme}"`,
          );
          giscusScript.setAttribute("data-theme", resolvedTheme);
        }
      }

      // Send message to iframe if it exists (using the correct format from starlight-giscus)
      const iframe = giscusElement?.querySelector(
        "iframe.giscus-frame",
      ) as HTMLIFrameElement;
      if (iframe?.contentWindow) {
        debugLog("Sending postMessage to existing iframe");

        // Try multiple approaches since the iframe might not be responding
        const message = {
          giscus: {
            setConfig: {
              theme: resolvedTheme,
            },
          },
        };

        // Send immediately
        iframe.contentWindow.postMessage(message, "*");

        // Also try after a small delay (in case iframe is still loading)
        setTimeout(() => {
          debugLog("Sending delayed postMessage");
          iframe.contentWindow?.postMessage(message, "*");
        }, 100);

        // Set up a single timeout to detect if no confirmation is received
        const timeout = setTimeout(() => {
          debugLog(`No giscus confirmation received within 3 seconds`);
        }, 3000);

        pendingMessageTimeouts.push(timeout);
      } else {
        debugLog("No iframe found - script data-theme updated for next load");
      }
    } catch (e) {
      console.warn("Failed to parse giscus theme configuration:", e);
    }
  }

  // Listen for messages from the giscus iframe (following starlight-giscus pattern)
  window.addEventListener("message", (event) => {
    if (event.origin !== "https://giscus.app") return;
    if (!(typeof event.data === "object" && event.data.giscus)) return;

    debugLog("Received giscus message:", event.data);

    // Clear pending timeouts since we got confirmation
    clearPendingMessages();

    // When giscus sends any message, it means it's ready - sync theme immediately
    const dataTheme = document.documentElement.getAttribute("data-theme");
    if (dataTheme) {
      debugLog("Giscus is ready, syncing theme based on message received");
      syncCommentsTheme();
    }
  });

  window.addEventListener("load", () => {
    debugLog("Pagination script loaded, setting up theme sync");

    // Try immediate sync first (before iframe loads)
    syncCommentsTheme();

    // Also sync with a delay to catch any late-loading iframes
    setTimeout(syncCommentsTheme, 500);

    const observer = new MutationObserver(() => {
      debugLog("Document theme attribute changed");
      // Immediate sync to catch script updates
      syncCommentsTheme();
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["data-theme"],
    });
  });
</script>
